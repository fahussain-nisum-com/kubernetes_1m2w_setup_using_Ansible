Ansible 

https://buildvirtual.net/deploy-a-kubernetes-cluster-using-ansible/
https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-ubuntu-20-04
------- On control node ---------
$ sudo apt update
	//update your os
$ sudo apt install ansible
	//install ansible
$ sudo vim /etc/ansible/hosts
	//open and add following lines in file

		ansible-node1 ansible_host=192.168.117.135
		ansible-node2 ansible_host=192.168.117.133
		ansible-node3 ansible_host=192.168.117.134

ansible all -m ping by providing passwordless private key file
$ ansible all --key-file ~/.ssh/ansible -m ping

	//Test all target machines are responding
$ ansible all -a "df -h"
	// View details of target machines
		


		------------ ----------- -----------
		Setup root user for passwordless user creation
			Set permitrootlogin to yes in sshd_config
			open .ssh folder, create if it don't exist
			add key.pub in authorized_keys
			Done
			To test
				On other machine 
					$ ssh -i ~/.ssh/ansible root@192.168.117.135
					Machine must not ask for password because key is generated without paraphrase

		ssh into ansible targets 

		First ssh machines manually
		In your users home directory generate keys 
			$ ssh-keygen -t ed25519 -C "Ansible"
				- Don't add passphrase in case of Ansible keys generation
					o.w it will prompt you for it
				- Name the key with ansible by giving path as /home/user1/.ssh/ansible
			$ ssh-copy-id -i ~/.ssh/ansible 192.168.117.135

			$ ssh -i ~/.ssh/ansible 192.168.117.135
				//To test your file is working 
					This will not prompt you for password

		------------ ----------- -----------

$ mkdir kubernetes
$ cd kubernetes
$ vi hosts
	//add this to the file
		[masters]
		master ansible_host=192.168.117.135 ansible_user=root

		[workers]
		worker1 ansible_host=192.168.117.133 ansible_user=root
		worker2 ansible_host=192.168.117.134 ansible_user=root

	Test by running this command:
	$ ansible all --key-file ~/.ssh/ansible -i hosts -m ping

Now Create a Kubernetes user with Ansible Playbook
$ vi users.yml 
  =>Add this content to users.yml
	- hosts: 'workers, masters'
	  become: yes

	  tasks:
	    - name: create the kube user account
	      user: name=kube append=yes state=present createhome=yes shell=/bin/bash

	    - name: allow 'kube' to use sudo without needing a password
	      lineinfile:
	        dest: /etc/sudoers
	        line: 'kube ALL=(ALL) NOPASSWD: ALL'
	        validate: 'visudo -cf %s'

	    - name: set up authorized keys for the kube user
	      authorized_key: user=kube key="{{item}}"
	      with_file:
	        - ~/.ssh/id_rsa.pub

 ==>Run this command to execute the playbook
	$ ansible-playbook --key-file ~/.ssh/ansible -i hosts users.yml

Install Kubernetes with Ansible Playbook

Now Create a Kubernetes user with Ansible Playbook
$ vi install-k8s.yml 
  =>Add this content to install-k8s.yml

	---
	- hosts: "masters, workers"
	  remote_user: ubuntu
	  become: yes
	  become_method: sudo
	  become_user: root
	  gather_facts: yes
	  connection: ssh

	  tasks:
	     - name: Create containerd config file
	       file:
	         path: "/etc/modules-load.d/containerd.conf"
	         state: "touch"

	     - name: Add conf for containerd
	       blockinfile:
	         path: "/etc/modules-load.d/containerd.conf"
	         block: |
	               overlay
	               br_netfilter

	     - name: modprobe
	       shell: |
	               sudo modprobe overlay
	               sudo modprobe br_netfilter


	     - name: Set system configurations for Kubernetes networking
	       file:
	         path: "/etc/sysctl.d/99-kubernetes-cri.conf"
	         state: "touch"

	     - name: Add conf for containerd
	       blockinfile:
	         path: "/etc/sysctl.d/99-kubernetes-cri.conf"
	         block: |
	                net.bridge.bridge-nf-call-iptables = 1
	                net.ipv4.ip_forward = 1
	                net.bridge.bridge-nf-call-ip6tables = 1

	     - name: Apply new settings
	       command: sudo sysctl --system

	     - name: install containerd
	       shell: |
	               sudo apt-get update && sudo apt-get install -y containerd
	               sudo mkdir -p /etc/containerd
	               sudo containerd config default | sudo tee /etc/containerd/config.toml
	               sudo systemctl restart containerd

	     - name: disable swap
	       shell: |
	               sudo swapoff -a
	               sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

	     - name: install and configure dependencies
	       shell: |
	               sudo apt-get update && sudo apt-get install -y apt-transport-https curl
	               curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

	     - name: Create kubernetes repo file
	       file:
	         path: "/etc/apt/sources.list.d/kubernetes.list"
	         state: "touch"

	     - name: Add K8s Source
	       blockinfile:
	         path: "/etc/apt/sources.list.d/kubernetes.list"
	         block: |
	               deb https://apt.kubernetes.io/ kubernetes-xenial main

	     - name: install kubernetes
	       shell: |
	               sudo apt-get update
	               sudo apt-get install -y kubelet=1.20.1-00 kubeadm=1.20.1-00 kubectl=1.20.1-00
	               sudo apt-mark hold kubelet kubeadm kubectl

==>Run this command to execute the playbook
$ ansible-playbook --key-file ~/.ssh/ansible -i hosts install-k8s.yml
			
			-----------------------------------


Creating a Kubernetes Cluster Master Node
$ vi master.yml
  =>Add this content to master.yml
	- hosts: masters
	  become: yes
	  tasks:
	    - name: initialize the cluster
	      shell: kubeadm init --pod-network-cidr=10.244.0.0/16
	      args:
	        chdir: $HOME
	        creates: cluster_initialized.txt

	    - name: create .kube directory
	      become: yes
	      become_user: kube
	      file:
	        path: $HOME/.kube
	        state: directory
	        mode: 0755

	    - name: copies admin.conf to user's kube config
	      copy:
	        src: /etc/kubernetes/admin.conf
	        dest: /home/kube/.kube/config
	        remote_src: yes
	        owner: kube

	    - name: install Pod network
	      become: yes
	      become_user: kube
	      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml 
	      args:
	        chdir: $HOME
	        
	    - name: Get the token for joining the worker nodes
	      become: yes
	      become_user: kube
	      shell: kubeadm token create  --print-join-command
	      register: kubernetes_join_command

	    - debug:
	      msg: "{{ kubernetes_join_command.stdout }}"

	    - name: Copy join command to local file.
	      become: yes
	      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="/tmp/kubernetes_join_command" mode=0777

==>Run this command to execute the playbook
$ ansible-playbook --key-file ~/.ssh/ansible -i hosts master.yml

			-----------------------------------

Join Worker Nodes to Kubernetes Cluster using Ansible Playbook
$ vi join-workers.yml
  =>Add this content to join-workers.yml
	- hosts: workers
	  become: yes
	  gather_facts: yes

	  tasks:
	   - name: Copy join command from Ansiblehost to the worker nodes.
	     become: yes
	     copy:
	       src: kubernetes_join_command
	       dest: /tmp/kubernetes_join_command
	       mode: 0777

	   - name: Join the Worker nodes to the cluster.
	     become: yes
	     command: sh /tmp/kubernetes_join_command
	     register: joined_or_not

Note: THis script has issue in joining 
	You need to get join command and copy it in your ansible controller
		project folder and it will than copy them to remote machines
==>Run this command to execute the playbook
$ ansible-playbook --key-file ~/.ssh/ansible -i hosts join-workers.yml
		---------------------------

To test all nodes are connected and ready 
$ kubectl get nodes
-------------- --------- --------------








